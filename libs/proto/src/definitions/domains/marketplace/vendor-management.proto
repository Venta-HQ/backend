syntax = "proto3";

package marketplace.vendor_management;

service VendorManagementService {
  rpc GetVendorById (VendorIdentityData) returns (VendorLookupResponse) {}
  rpc CreateVendor (VendorCreateData) returns (VendorCreateResponse) {}
  rpc UpdateVendor (VendorUpdateData) returns (VendorUpdateResponse) {}
  rpc UpdateVendorLocation (VendorLocationUpdate) returns (Empty) {}
  rpc GetVendorsInArea (VendorLocationRequest) returns (VendorLocationResponse) {}
}

// Service Function Types

message VendorCreateData {
  string name = 1;
  string description = 2;
  string email = 3;
  string phone = 4;
  string website = 5;
  string imageUrl = 6;
  string userId = 7;
}

message VendorCreateResponse {
  string id = 1;
}

message VendorIdentityData {
  string id = 1;
}

message VendorLookupResponse {
  Vendor vendor = 1;
}

message VendorUpdateData {
  string id = 1;
  string name = 2;
  string description = 3;
  string email = 4;
  string website = 5;
  string phone = 6;
  string userId = 7;
  string imageUrl = 8;
}

message VendorUpdateResponse {
  string message = 1;
  bool success = 2;
}

// Vendor Location Operations

message VendorLocationUpdate {
    string vendorId = 1;
    Location coordinates = 2;
}

message VendorLocationRequest {
    Location ne = 1;
    Location sw = 2;
}

message VendorLocationResponse {
    repeated Vendor vendors = 1;
}

// Helper Types

message Vendor {
    string id = 1;

    // These lat/long values are used to show locations on the map without subscription to live location
    Location coordinates = 2;

    // General details
    string name = 3;       
    string description = 4;
    string phone = 5;
    string email = 6;
    string website = 7;
    bool isOpen = 8;
    string primaryImage = 9;

    // Metadata - using strings instead of google.protobuf.Timestamp
    string createdAt = 10;
    string updatedAt = 11;
}

message Location {
    double lat = 1;
    double lng = 2;
}

message Empty {

} 