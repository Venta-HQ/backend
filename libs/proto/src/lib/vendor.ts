// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.3
// source: vendor.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "vendor";

export interface VendorCreateData {
  name: string;
  description: string;
  email: string;
  phone: string;
  website: string;
  imageUrl: string;
  userId: string;
}

export interface VendorCreateResponse {
  id: string;
}

export interface VendorLookupData {
  id: string;
}

export interface VendorLookupByIdResponse {
  vendor: Vendor | undefined;
}

export interface Vendor {
  id: string;
  lat?: number | undefined;
  long?:
    | number
    | undefined;
  /** General details */
  name: string;
  description: string;
  phone: string;
  email: string;
  website: string;
  open: boolean;
  primaryImage: string;
  /** Metadata */
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Empty {
}

export const VENDOR_PACKAGE_NAME = "vendor";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface VendorServiceClient {
  getVendorById(request: VendorLookupData, metadata?: Metadata): Observable<VendorLookupByIdResponse>;

  createVendor(request: VendorCreateData, metadata?: Metadata): Observable<VendorCreateResponse>;
}

export interface VendorServiceController {
  getVendorById(
    request: VendorLookupData,
    metadata?: Metadata,
  ): Promise<VendorLookupByIdResponse> | Observable<VendorLookupByIdResponse> | VendorLookupByIdResponse;

  createVendor(
    request: VendorCreateData,
    metadata?: Metadata,
  ): Promise<VendorCreateResponse> | Observable<VendorCreateResponse> | VendorCreateResponse;
}

export function VendorServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getVendorById", "createVendor"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("VendorService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("VendorService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const VENDOR_SERVICE_NAME = "VendorService";
