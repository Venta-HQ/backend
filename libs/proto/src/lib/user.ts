// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.29.3
// source: user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface ClerkWebhookResponse {
  message: string;
}

export interface ClerkUserData {
  id: string;
}

export interface RevenueCatSubscriptionData {
  clerkUserId: string;
  providerId: string;
  data: RevenueCatProviderData | undefined;
}

export interface SubscriptionCreatedResponse {
  message: string;
}

export interface UserVendorData {
  userId: string;
}

export interface UserVendorsResponse {
  vendors: UserVendor[];
}

/** Helper Types */
export interface UserVendor {
  id: string;
  name: string;
}

export interface ClerkWebhookEvent {
  type: string;
  object: string;
  event: ClerkUserData | undefined;
}

export interface RevenueCatProviderData {
  transactionId: string;
  eventId: string;
  productId: string;
}

export interface Empty {
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  handleClerkUserCreated(request: ClerkUserData, metadata?: Metadata): Observable<ClerkWebhookResponse>;

  handleClerkUserDeleted(request: ClerkUserData, metadata?: Metadata): Observable<ClerkWebhookResponse>;

  handleSubscriptionCreated(
    request: RevenueCatSubscriptionData,
    metadata?: Metadata,
  ): Observable<SubscriptionCreatedResponse>;

  getUserVendors(request: UserVendorData, metadata?: Metadata): Observable<UserVendorsResponse>;
}

export interface UserServiceController {
  handleClerkUserCreated(
    request: ClerkUserData,
    metadata?: Metadata,
  ): Promise<ClerkWebhookResponse> | Observable<ClerkWebhookResponse> | ClerkWebhookResponse;

  handleClerkUserDeleted(
    request: ClerkUserData,
    metadata?: Metadata,
  ): Promise<ClerkWebhookResponse> | Observable<ClerkWebhookResponse> | ClerkWebhookResponse;

  handleSubscriptionCreated(
    request: RevenueCatSubscriptionData,
    metadata?: Metadata,
  ): Promise<SubscriptionCreatedResponse> | Observable<SubscriptionCreatedResponse> | SubscriptionCreatedResponse;

  getUserVendors(
    request: UserVendorData,
    metadata?: Metadata,
  ): Promise<UserVendorsResponse> | Observable<UserVendorsResponse> | UserVendorsResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "handleClerkUserCreated",
      "handleClerkUserDeleted",
      "handleSubscriptionCreated",
      "getUserVendors",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
