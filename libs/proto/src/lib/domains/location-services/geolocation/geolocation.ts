// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.29.3
// source: domains/location-services/geolocation/geolocation.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "location_services.geolocation";

export interface AddressLookupRequest {
  address: string;
}

export interface AddressLookupResponse {
  location: Location | undefined;
  success: boolean;
  error: string;
}

export interface DistanceRequest {
  from: Location | undefined;
  to: Location | undefined;
}

export interface DistanceResponse {
  /** in meters */
  distance: number;
  /** in seconds */
  duration: number;
}

export interface CoordinateValidationRequest {
  location: Location | undefined;
}

export interface CoordinateValidationResponse {
  valid: boolean;
  error: string;
}

export interface Location {
  long: number;
  lat: number;
}

export interface Empty {
}

export const LOCATION_SERVICES_GEOLOCATION_PACKAGE_NAME = "location_services.geolocation";

export interface GeolocationServiceClient {
  getLocationByAddress(request: AddressLookupRequest, metadata?: Metadata): Observable<AddressLookupResponse>;

  calculateDistance(request: DistanceRequest, metadata?: Metadata): Observable<DistanceResponse>;

  validateCoordinates(
    request: CoordinateValidationRequest,
    metadata?: Metadata,
  ): Observable<CoordinateValidationResponse>;
}

export interface GeolocationServiceController {
  getLocationByAddress(
    request: AddressLookupRequest,
    metadata?: Metadata,
  ): Promise<AddressLookupResponse> | Observable<AddressLookupResponse> | AddressLookupResponse;

  calculateDistance(
    request: DistanceRequest,
    metadata?: Metadata,
  ): Promise<DistanceResponse> | Observable<DistanceResponse> | DistanceResponse;

  validateCoordinates(
    request: CoordinateValidationRequest,
    metadata?: Metadata,
  ): Promise<CoordinateValidationResponse> | Observable<CoordinateValidationResponse> | CoordinateValidationResponse;
}

export function GeolocationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getLocationByAddress", "calculateDistance", "validateCoordinates"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("GeolocationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("GeolocationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GEOLOCATION_SERVICE_NAME = "GeolocationService";
