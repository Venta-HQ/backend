// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.6
//   protoc               v5.29.3
// source: domains/marketplace/vendor-management.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../../shared/common";
import { Location } from "../../shared/location";

export const protobufPackage = "marketplace.vendor_management";

export interface VendorCreateData {
  name: string;
  description: string;
  email: string;
  phone: string;
  website: string;
  profileImage: string;
}

export interface VendorIdentityData {
  id: string;
}

export interface VendorLookupResponse {
  vendor: Vendor | undefined;
}

export interface VendorUpdateData {
  id: string;
  name: string;
  description: string;
  email: string;
  website: string;
  phone: string;
  imageUrl: string;
}

export interface Vendor {
  id: string;
  /** These lat/long values are used to show locations on the map without subscription to live location */
  coordinates:
    | Location
    | undefined;
  /** General details */
  name: string;
  description: string;
  phone: string;
  email: string;
  website: string;
  isOpen: boolean;
  primaryImage: string;
  /** Metadata - using strings instead of google.protobuf.Timestamp */
  createdAt: string;
  updatedAt: string;
}

export const MARKETPLACE_VENDOR_MANAGEMENT_PACKAGE_NAME = "marketplace.vendor_management";

export interface VendorManagementServiceClient {
  getVendorById(request: VendorIdentityData, metadata?: Metadata): Observable<VendorLookupResponse>;

  createVendor(request: VendorCreateData, metadata?: Metadata): Observable<VendorIdentityData>;

  updateVendor(request: VendorUpdateData, metadata?: Metadata): Observable<Empty>;
}

export interface VendorManagementServiceController {
  getVendorById(
    request: VendorIdentityData,
    metadata?: Metadata,
  ): Promise<VendorLookupResponse> | Observable<VendorLookupResponse> | VendorLookupResponse;

  createVendor(
    request: VendorCreateData,
    metadata?: Metadata,
  ): Promise<VendorIdentityData> | Observable<VendorIdentityData> | VendorIdentityData;

  updateVendor(request: VendorUpdateData, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;
}

export function VendorManagementServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getVendorById", "createVendor", "updateVendor"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("VendorManagementService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("VendorManagementService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const VENDOR_MANAGEMENT_SERVICE_NAME = "VendorManagementService";
